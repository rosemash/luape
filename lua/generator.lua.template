-- this is the template for the script that will be appended to the luape binary, used for generating new executables
-- it is responsible for compiling lua scripts and creating executable files by copying its runtime (luape.exe)
-- as a build step, /python/hack.py creates a copy of this template with necessary structural info about the PE, which may differ from build to build
-- the resulting script is first patched into the host binary as plaintext, then _that_ binary is executed to bootstrap a final binary where the script is compiled
-- when invoked, the final program will copy itself, write new bytecode this script lives, and modify the PE header using the offsets that were hard-patched into this script by hack.py

local source, outname --raw arguments (not options)

local subsystemMode = 0x3
local stripDebugInfo = true
local chunkName = nil

local function warn(m) print(("(warning: %s)"):format(m)) end
local function info(m) print(("%s: %s"):format(_FILENAME:match("^.+[/\\](.+)$") or _FILENAME, m)) end

local options = {{
	hidden = {{
		description = "output executable will run in gui mode (no console)";
		behavior = function(self) subsystemMode = 0x2 end;
	}};
	debug = {{
		description = "lua debug info will not be stripped from the output";
		behavior = function(self) stripDebugInfo = false end;
	}};
	name = {{
		description = "the lua chunk name will be set to the given string (/name=...)";
		behavior = function(self, val) chunkName = val end;
	}};
}}

local function printOptions()
	info("<source OR file:source.lua> <output.exe> [option...]")
	print("options:")
	for k, v in pairs(options) do
		print(("  /%s: %s"):format(k, v.description))
	end
end

if #arg >= 2 then --minimum first 2 arguments (<source> <output>)
	source, outname = arg[1], arg[2]
else
	printOptions()
	return
end

for i = 3, #arg do --match all arguments thereafter
	local option = arg[i]:match("^[/-]+(%w*)=?")
	if option == "help" then
		printOptions()
		return
	end
	if options[option] then
		local value = arg[i]:match("^[/-]+%w*=(.*)")
		options[option]:behavior(value)
	else
		info(("unknown option %q"):format(option or arg[i]))
		return
	end
end

if chunkName then --if user uses /name we should provide helpful warnings
	if chunkName == "" then
		warn("chunk name is set to an empty string")
	else
		print(("the chunk name will be set to %q"):format(chunkName))
	end
	if stripDebugInfo then
		warn("chunk name has no effect if you don't include debug info")
	end
end


--------------------------------


local function encodeNumber(num, size)
	local encoded = ""
	for i = 1, size do
		encoded = encoded .. string.char(num % 0x100)
		num = math.floor(num / 0x100)
	end
	return encoded
end

local buff = ""

local function seekAndPatch(file, offset, num, size)
	buff = buff .. file:read(offset - file:seek())
	local existingVal = 0
	for c in file:read(size):reverse():gmatch(".") do existingVal = existingVal * 0x100 + c:byte() end
	buff = buff .. encodeNumber(num, size)
	if num ~= existingVal then
		print(("0x%.8x %db %d->%d"):format(file:seek()-size, size, existingVal, num))
	end
end

local filename = source:match("^file:(.+)$")
if filename then
	local input = assert(io.open(filename, "r"), ("failed to open input file %q"):format(filename))
	source = input:read("*all")
	input:close()
elseif source:match("%.lua$") and #source <= 260 then --260 is MAX_PATH
	warn(("you may have meant 'file:%s'"):format(source))
end

local func, errmsg = loadstring(source, ("=%s"):format(chunkName or "lua"))
if not func then
	print("error compiling lua source: " .. errmsg)
	return
end
source = string.dump(func, stripDebugInfo)
source = encodeNumber(#source, 4) .. source

local self = assert(io.open(_FILENAME, "rb"), ("generator failed to open itself for copying (attemped to open %q)"):format(_FILENAME))
seekAndPatch(self, {isizeoffs:d}, {imagesize:d} + #source, 4)
seekAndPatch(self, {smodeoffs:d}, subsystemMode, 2)
seekAndPatch(self, {vsizeoffs:d}, #source, 4)
seekAndPatch(self, {rsizeoffs:d}, #source, 4)
buff = buff .. self:read({luastart:d} - self:seek()) .. source
self:close()

local output = assert(io.open(outname, "wb"), ("failed to create output file %q"):format(outname))
output:write(buff)
output:write(("\0"):rep({alignment:d})) --to compensate for file alignment
output:close()

print(("Wrote %d bytes to %q."):format(#buff, outname))
