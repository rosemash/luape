-- this is the template for the script that will be appended to the luape binary, used for generating new executables
-- it is responsible for compiling lua scripts and creating executable files by copying its runtime (luape.exe)
-- as a build step, /python/hack.py creates a copy of this template with necessary structural info about the PE, which may differ from build to build
-- the resulting script is first patched into the host binary as plaintext, then _that_ binary is executed to bootstrap a final binary where the script is compiled
-- when invoked, the final program will copy itself, write new bytecode this script lives, and modify the PE header using the offsets that were hard-patched into this script by hack.py

if #arg < 2 then
	print(("%s <source OR file:source.lua> <output.exe> [option...]"):format(_FILENAME:match("^.+[/\\](.+)$") or _FILENAME))
	return
end

local flags = table.concat(arg, " ", 3)

local function printwarning(m) print(("(warning: %s)"):format(m)) end
local function printoption(m) print(("option: %s"):format(m)) end

local function hasFlag(name, ifyes, ifno, message)
	local yes = flags:match("[/-]+"..name) ~= nil
	if yes then
		if message then printoption(message) end
		if ifyes ~= nil then return ifyes else return true end
	end
	return ifno or false
end

local function getFlagValue(name, message, valueFormatMessage)
	local value = flags:match("[/-]+"..name.."=([%w_]*)")
	if value and message then printoption(valueFormatMessage and message:format(value) or message) end
	return value
end

local subsystemMode = hasFlag("hidden", 0x2, 0x3, "output executable will run in gui mode (no console)")
local stripDebugInfo = hasFlag("debug", false, true, "lua debug info will not be stripped from the output")
local chunkName = getFlagValue("name", "the lua chunk name will be set to %s", true)
if chunkName and stripDebugInfo then
	printwarning("chunk name has no effect if you don't include debug info")
end

local function encodeNumber(num, size)
	local encoded = ""
	for i = 1, size do
		encoded = encoded .. string.char(num % 0x100)
		num = num / 0x100
	end
	return encoded
end

local buff = ""

local function seekAndPatch(file, offset, num, size)
	buff = buff .. file:read(offset - file:seek())
	local existingVal = 0
	for c in file:read(size):reverse():gmatch(".") do existingVal = existingVal * 0x100 + c:byte() end
	buff = buff .. encodeNumber(num, size)
	if num ~= existingVal then
		print(("0x%.8x %db %d->%d"):format(file:seek()-size, size, existingVal, num))
	end
end

local source = arg[1]
local filename = source:match("^file:(.+)$")
if filename then
	local input = assert(io.open(filename, "r"), ("failed to open input file %q"):format(filename))
	source = input:read("*all")
	input:close()
elseif arg[1]:match("%.lua$") and #arg[1] <= 260 then --260 is MAX_PATH
	printwarning(("you may have meant 'file:%s'"):format(arg[1]))
end

local func, errmsg = loadstring(source, ("=%s"):format(chunkName or "lua"))
if not func then
	print("error compiling lua source: " .. errmsg)
	return
end
source = string.dump(func, stripDebugInfo)
source = encodeNumber(#source, 4) .. source

local self = assert(io.open(_FILENAME, "rb"), ("generator failed to open itself for copying (attemped to open %q)"):format(_FILENAME))
seekAndPatch(self, {isizeoffs:d}, {imagesize:d} + #source, 4)
seekAndPatch(self, {smodeoffs:d}, subsystemMode, 2)
seekAndPatch(self, {vsizeoffs:d}, #source, 4)
seekAndPatch(self, {rsizeoffs:d}, #source, 4)
buff = buff .. self:read({luastart:d} - self:seek()) .. source
self:close()

local output = assert(io.open(arg[2], "wb"), ("failed to create output file %q"):format(arg[2]))
output:write(buff)
output:write(("\0"):rep({alignment:d})) --to compensate for file alignment
output:close()

print(("Wrote %d bytes to %q."):format(#buff, arg[2]))
